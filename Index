<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pokédex</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #343434;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #bd1e1e;
            color: #ddd;
            padding: 20px;
            text-align: center;
        }
        h1 {
            margin: 0;
        }
        .search-bar {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 20px;
            flex-wrap: wrap;
        }
        .search-bar input {
            padding: 10px;
            font-size: 16px;
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .search-bar button {
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
        }
        .pokedex {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            padding: 20px;
        }
        .pokemon-card {
            background-color: #2e2f30;
            border: 1px solid #2e2f30;
            border-radius: 8px;
            width: 200px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(189, 30, 30, 0.1);
            transition: transform 0.3s;
            position: relative;
        }
        .pokemon-card:hover {
            transform: scale(1.1);
        }
        .pokemon-card img {
            width: 100px;
            margin-top: 10px;
        }
        .pokemon-card h3 {
            margin: 0;
            color: #ddd;
        }
        .pokemon-card p {
            margin: 10px 0;
            color: #ddd;
        }
        .pokemon-details {
            display: none;
            background-color: #2e2f30;
            border-top: 1px solid #2e2f30;
            padding: 10px;
            text-align: left;
        }
        .pokemon-details p {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <header>
        <h1>Pokédex</h1>
    </header>

    <div class="search-bar">
        <input type="text" id="search" placeholder="Search by name, number, or type...">
        <button id="prev" onclick="prevPage()" disabled>Previous</button>
        <button id="next" onclick="nextPage()">Next</button>
    </div>

    <div class="pokedex" id="pokedex"></div>

    <script>
        const pokedex = document.getElementById('pokedex');
        const search = document.getElementById('search');
        const prevBtn = document.getElementById('prev');
        const nextBtn = document.getElementById('next');

        let pokemonData = [];
        let filteredData = [];
        let currentPage = 1;
        const pokemonPerPage = 20;
        let paginatedView = false;

        async function fetchPokemonData(id) {
    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
    const data = await response.json();
    return {
        number: data.id,
        name: data.name.charAt(0).toUpperCase() + data.name.slice(1),
        image: data.sprites.front_default,
        type: data.types.map(type => type.type.name).join(', '),
        height: data.height / 10, // Convert to meters
        weight: data.weight / 10, // Convert to kilograms
        abilities: data.abilities.map(ability => ability.ability.name).join(', '),
        stats: data.stats.map(stat => ({
            name: stat.stat.name,
            value: stat.base_stat
        }))
    };
}

async function loadPokedex() {
    pokemonData = [];
    for (let i = 1; i <= 1030; i++) {
        const pokemon = await fetchPokemonData(i);
        pokemonData.push(pokemon);
    }
    filteredData = pokemonData;
    renderPokedex(filteredData);
}

function paginate(list, page = 1) {
    const start = (page - 1) * pokemonPerPage;
    const end = page * pokemonPerPage;
    return list.slice(start, end);
}

function renderPokedex(list) {
    pokedex.innerHTML = list.map(displayPokemon).join('');
    addClickListeners();
}

function displayPokemon(pokemon) {
    const statsHTML = pokemon.stats.map(stat => {
        return `<p><strong>${capitalizeFirstLetter(stat.name)}:</strong> ${stat.value}</p>`;
    }).join('');

    return `
        <div class="pokemon-card" data-id="${pokemon.number}">
            <img src="${pokemon.image}" alt="${pokemon.name}">
            <h3>${pokemon.name}</h3>
            <p>#${pokemon.number}</p>
            <p>Type: ${pokemon.type}</p>
            <div class="pokemon-details" id="details-${pokemon.number}">
                <p><strong>Height:</strong> ${pokemon.height} m</p>
                <p><strong>Weight:</strong> ${pokemon.weight} kg</p>
                <p><strong>Abilities:</strong> ${pokemon.abilities}</p>
                ${statsHTML} <!-- Stats Section -->
            </div>
        </div>
    `;
}

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function addClickListeners() {
    const cards = document.querySelectorAll('.pokemon-card');
    cards.forEach(card => {
        card.addEventListener('click', function () {
            const id = card.getAttribute('data-id');
            const details = document.getElementById(`details-${id}`);
            details.style.display = details.style.display === 'block' ? 'none' : 'block';
        });
    });
}

function nextPage() {
    if (!paginatedView) {
        paginatedView = true;
        currentPage = 1;
    } else if (currentPage < Math.ceil(filteredData.length / pokemonPerPage)) {
        currentPage++;
    }
    updatePaginationButtons();
    renderPokedex(paginate(filteredData, currentPage));
}

function prevPage() {
    if (paginatedView && currentPage > 1) {
        currentPage--;
        renderPokedex(paginate(filteredData, currentPage));
    } else if (paginatedView && currentPage === 1) {
        paginatedView = false;
        renderPokedex(filteredData);
    }
    updatePaginationButtons();
}

function updatePaginationButtons() {
    prevBtn.disabled = !paginatedView || (paginatedView && currentPage === 1);
    nextBtn.disabled = !paginatedView || currentPage >= Math.ceil(filteredData.length / pokemonPerPage);
}


        search.addEventListener('input', function () {
            const query = search.value.toLowerCase();
            filteredData = pokemonData.filter(pokemon =>
                pokemon.name.toLowerCase().includes(query) ||
                pokemon.number.toString().includes(query) ||
                pokemon.type.toLowerCase().includes(query)
            );
            currentPage = 1;
            if (paginatedView) {
                renderPokedex(paginate(filteredData, currentPage));
                updatePaginationButtons();
            } else {
                renderPokedex(filteredData);
            }
        });

        loadPokedex();
    </script>
</body>
</html>
